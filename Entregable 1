//este algoritmo esta muy bien!!!!

#include <vector>
#include <tuple>
#include <string>
#include <iostream>


using namespace std;


int sumaAtacantes(const vector<tuple<string, int, int>> atacantes){
    int suma = 0;
    for(int i =0;i<atacantes.size();i++){
        suma+=get<1>(atacantes[i]);
    }
    return suma;
}
int sumaDefensores(const vector<tuple<string, int, int>> defensores){
    int suma = 0;
    for(int i=0;i<defensores.size();i++){
        suma += get<2>(defensores[i]);
    }
    return suma;
}
// int i es el indice que me recorre mi vector con los jugadores disponibles, se inicializa con 0
tuple<vector<tuple<string,int,int>>,vector<tuple<string,int,int>>> formacion(const vector<tuple<string,int,int>>& jugadores, vector<tuple<string,int,int>>& mejorAtaque, vector<tuple<string,int,int>>& defensa, int i, vector<tuple<string,int,int>>& ataque){
    if(i==jugadores.size()) return make_pair(ataque,defensa); //caso base
    //aca tendria que agregar el caso donde hay empate en mejorAtaque y ataque con el ultimo jugador,ahi desempata el puntaje en defensa
    if(ataque.size()<5){
        ataque.push_back(jugadores[i]);
        if(sumaAtacantes(ataque)> sumaAtacantes(mejorAtaque)){
            mejorAtaque = ataque;
            return formacion(jugadores,mejorAtaque,defensa,i+1,ataque);
        }

    }else{//caso en que lo pongo como defensa
        defensa.push_back(jugadores[i]);
        return formacion(jugadores,mejorAtaque,defensa,i+1,ataque);
    }
}

int main() {
    vector<tuple<string, int, int>> jugadores;
    //genero vector jugadores
    jugadores.push_back({"sameezahur", 20, 21});
    jugadores.push_back({"sohelh", 18, 9});
    jugadores.push_back({"jaan", 17, 86});
    jugadores.push_back({"sidky", 16, 36});
    jugadores.push_back({"shamin", 16, 18});
    jugadores.push_back({"shadowcoder", 12, 9});
    jugadores.push_back({"muntasir", 13, 4});
    jugadores.push_back({"brokenarrow", 16, 16});
    jugadores.push_back({"emotionalblind", 16, 12});
    jugadores.push_back({"tanaeem", 20, 97});

    tuple<vector<tuple<string, int, int>>, vector<tuple<string, int, int>>> equipo;
    vector<tuple<string, int, int>> defensa, ataque, mejorAtaque;
    equipo = formacion(jugadores, mejorAtaque, defensa, 0, ataque);

    cout << "Ataque:" << endl;
    for(const auto& jugador : ataque) {
        cout << get<0>(jugador) << " - Ataque: " << get<1>(jugador) << endl;
    }
    cout << "Defensa:" <<endl;
    for(const auto& jugador: defensa){
        cout << get<0>(jugador) << " - Defensa: " << get<2>(jugador) << endl;
    }
    return 0;

}
